#!/bin/bash

# Find the source of this file
SOURCE="${BASH_SOURCE[0]}"
# Make it an absolute path
DIR="$( cd "$( dirname "$SOURCE" )" && pwd )"

if [ -z "$MOZPERFOUT" ] ; then
    exec 3>&1
else
    exec 3>"$MOZPERFOUT"
fi

# where all gaia specific customizations for mocha-marionette live.
SHARED=$GAIA_DIR/shared/test/integration

# Install prerequisites
make node_modules || exit 1
make -C $GAIA_DIR/ b2g_sdk || exit 1
if [ ! -d $GAIA_DIR/profile-test ]; then
  # Making the profile-test here instead of letting the child process create it,
  # which causes problems on Linux (Segmentation Fault) Bug 1067625
  PROFILE_FOLDER=profile-test make -C $GAIA_DIR/ profile-dir || exit 1
fi

if [ $MARIONETTE_RUNNER_HOST = "marionette-b2gdesktop-host" ] ; then
  # download b2g-desktop (if its not present)
  make -C $GAIA_DIR/ b2g || exit 1
fi

if [ -z "$XULRUNNER_DIRECTORY" ] ; then
  # the xulrunner directory isn't in the environment
  XULRUNNER_DIRECTORY=$(ls -d "$DIR"/../b2g_sdk/* | sort -nr | head -n1 2> /dev/null)
fi

if [ ! -d "$XULRUNNER_DIRECTORY" ] ; then
  echo "Couldn't find B2G. Please execute this file from 'make' or install B2G yourself."
  exit 1
fi

if [ -z "$XPCSHELLSDK" ] ; then
  XPCSHELLSDK=$(find "$XULRUNNER_DIRECTORY" -type f -name xpcshell | sort -nr | head -n1 2> /dev/null)
  exit 1
fi

if [ ! -e "$XPCSHELLSDK" ] ; then
  echo "Couldn't find B2G. Please execute this file from 'make' or install B2G yourself."
  exit 1
fi

# find xpcshell and put it in the path
XPCSHELL_DIR=$(dirname "$XPCSHELLSDK")

if [ -z "$APPS" ] ; then
  echo "APPS isn't defined. Cannot continue."
  exit 1
fi

# We try to figure out the reporter.
# Default is JSON. But console is better for humans.
# TODO maybe select based on MOZPERFOUT too...
case z"$REPORTER" in
zConsoleMozPerf)
  MOZPERFREPORTER="$GAIA_DIR/tests/reporters/consolemozperf.js"
  ;;
*)
  MOZPERFREPORTER="$GAIA_DIR/tests/reporters/jsonmozperf.js"
  ;;
esac

# All echo calls help create a JSON array
echo '[' >&3
SHARED_PERF=`find tests/performance -name "*_test.js" -type f`
OLD_RESTART_B2G="$RESTART_B2G"
for app in $APPS; do
  if [ -z "$FIRST_LOOP_ITERATION" ]; then
    FIRST_LOOP_ITERATION=done
  else
    echo ',' >&3
  fi
  if [[ "$app" == "system" ]] && [[ "$TEST_BOOT" -eq 2 ]] ; then
    # The system boot test manually manages the reboot/restart lifecycle
    # Using the TEST_BOOT=2 flag forces an opt-in to manually run this test
    FILES_PERF=`test -d apps/$app/test/performance && find apps/$app/test/performance -name "*_test.js" -type f`
    export RESTART_B2G=0
  else
    FILES_PERF=`test -d apps/$app/test/performance && find apps/$app/test/performance -name "*_test.js" \( ! -name "system_startup_test.js" \) -type f`
    export RESTART_B2G=$OLD_RESTART_B2G
  fi
  # wrap marionette-mocha with gaia's defaults. We also need to alter the paths to
  # xpcshell in available for email fake servers.
  export CURRENT_APP="$app"
  OUT=`PATH=$XPCSHELL_DIR:$PATH $DIR/../node_modules/.bin/marionette-mocha \
    --timeout 60s \
    --reporter $MOZPERFREPORTER \
    --host $MARIONETTE_RUNNER_HOST \
    $GAIA_DIR/tests/performance/perf.js \
    $SHARED_PERF \
    $FILES_PERF \
    $@`
  # Bug 987383 if there is no output report an error.
  if [ -z "$OUT" ]; then
    echo "$CURRENT_APP returned no output." >&2
    echo "{ \"stats\": { \"suites\": 1, \"failures\": 1, \"error\": \"No output !\", \"application\": \""$CURRENT_APP"\" } }" >&3
  else
    echo "$OUT" >&3
  fi
done
echo ']' >&3
