/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "domstubs.idl"

interface nsIDOMDOMRequest;

[scriptable, uuid(1e38633d-d08b-4867-9944-afa5c648adb6)]
interface nsIB2GInputContext : nsISupports
{
  // The tag name of input field, which is enum of "input", "textarea", or "contenteditable"
  readonly attribute DOMString type;

  // The type of the input field, which is enum of text, number, password, url, search, email, and so on.
  // See http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#states-of-the-type-attribute
  readonly attribute DOMString inputType;

  /*
   * The inputmode string, representing the input mode.
   * See http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#input-modalities:-the-inputmode-attribute
   */
  readonly attribute DOMString inputMode;

  /*
   * The primary language for the input field.
   * It is the value of HTMLElement.lang.
   * See http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#htmlelement
   */
  readonly attribute DOMString lang;

  /*
   * Get the whole text content of the input field.
   */
  nsIDOMDOMRequest getText([optional] in long offset, [optional] in long length);

  // The start and stop position of the selection.
  readonly attribute long selectionStart;
  readonly attribute long selectionEnd;

  // The start and stop position of the selection.
  readonly attribute DOMString textBeforeCursor;
  readonly attribute DOMString textAfterCursor;

  /*
   * Set the selection range of the the editable text.
   * Note: This method cannot be used to move the cursor during composition. Calling this
   * method will cancel composition.
   * @param start The beginning of the selected text.
   * @param length The length of the selected text.
   *
   * Note that the start position should be less or equal to the end position.
   * To move the cursor, set the start and end position to the same value.
   */
  nsIDOMDOMRequest setSelectionRange(in long start, in long length);

  /*
   * Commit text to current input field and replace text around cursor position. It will clear the current composition.
   *
   * @param text The string to be replaced with.
   * @param offset The offset from the cursor position where replacing starts. Defaults to 0.
   * @param length The length of text to replace. Defaults to 0.
   */
  nsIDOMDOMRequest replaceSurroundingText(in DOMString text, [optional] in long offset, [optional] in long length);

  /*
   *
   * Delete text around the cursor.
   * @param offset The offset from the cursor position where deletion starts.
   * @param length The length of text to delete.
   * TODO: maybe updateSurroundingText(DOMString beforeText, DOMString afterText); ?
   */
  nsIDOMDOMRequest deleteSurroundingText(in long offset, in long length);

  /*
   * Notifies when the text around the cursor is changed, due to either text
   * editing or cursor movement. If the cursor has been moved, but the text around has not
   * changed, the IME won't get notification.
   *
   * The event handler function is specified as:
   * @param beforeString Text before and including cursor position.
   * @param afterString Text after and excluing cursor position.
   * function(DOMString beforeText, DOMString afterText) {
   * ...
   *  }
   */
  attribute nsIDOMEventListener onsurroundingtextchange;

  attribute nsIDOMEventListener onselectionchange;

  /*
   * send a character with its key events.
   * @param modifiers see http://mxr.mozilla.org/mozilla-central/source/dom/interfaces/base/nsIDOMWindowUtils.idl#206
   * @return true if succeeds. Otherwise false if the input context becomes void.
   * Alternative: sendKey(KeyboardEvent event), but we will likely waste memory for creating the KeyboardEvent object.
   */
  nsIDOMDOMRequest sendKey(in long keyCode, in long charCode, in long modifiers);

  /*
   * Set current composition. It will start or update composition.
   * @param cursor Position in the text of the cursor.
   *
   * The API implementation should automatically ends the composition
   * session (with event and confirm the current composition) if
   * endComposition is never called. Same apply when the inputContext is lost
   * during a unfinished composition session.
   */
  nsIDOMDOMRequest setComposition(in DOMString text, in long cursor);

  /*
   * End composition and actually commit the text. (was |commitText(text, offset, length)|)
   * Ending the composition with an empty string will not send any text.
   * Note that if composition always ends automatically (with the current composition committed) if the composition
   * did not explicitly with |endComposition()| but was interrupted with |sendKey()|, |setSelectionRange()|,
   * user moving the cursor, or remove the focus, etc.
   *
   * @param text The text
   */
  nsIDOMDOMRequest endComposition(in DOMString text);
};

[scriptable, uuid(40ad96b2-9efa-41fb-84c7-fbcec9b153f0)]
interface nsIB2GKeyboard : nsISupports
{
  void sendKey(in long keyCode, in long charCode);

  // Select the <select> option specified by index.
  // If this method is called on a <select> that support multiple
  // selection, then the option specified by index will be added to
  // the selection.
  // If this method is called for a select that does not support multiple
  // selection the previous element will be unselected.
  void setSelectedOption(in jsval index);

  // Select the <select> options specified by indexes. All other options
  // will be deselected.
  // If this method is called for a <select> that does not support multiple
  // selection, then the last index specified in indexes will be selected.
  void setSelectedOptions(in jsval indexes);

  // Set the value on the currently focused element. This has to be used
  // for special situations where the value had to be chosen amongst a
  // list (type=month) or a widget (type=date, time, etc.).
  // If the value passed in parameter isn't valid (in the term of HTML5
  // Forms Validation), the value will simply be ignored by the element.
  void setValue(in jsval value);

  void removeFocus();

  attribute nsIDOMEventListener onfocuschange;

  // Fires when user moves the cursor, changes the selection, or alters the
  // composing text length
  attribute nsIDOMEventListener onselectionchange;

  // The start position of the selection.
  readonly attribute long selectionStart;

  // The stop position of the selection.
  readonly attribute long selectionEnd;

  /*
   * Set the selection range of the the editable text.
   *
   * @param start The beginning of the selected text.
   * @param end The end of the selected text.
   *
   * Note that the start position should be less or equal to the end position.
   * To move the cursor, set the start and end position to the same value.
   */
  void setSelectionRange(in long start, in long end);

  /*
   * Replace text around the beginning of the current selection range of the
   * editable text.
   *
   * @param text The string to be replaced with.
   * @param beforeLength The number of characters to be deleted before the
   * beginning of the current selection range. Defaults to 0.
   * @param afterLength The number of characters to be deleted after the
   * beginning of the current selection range. Defaults to 0.
   */
  void replaceSurroundingText(in DOMString text,
                              [optional] in long beforeLength,
                              [optional] in long afterLength);
};

// Manages the list of IMEs, enables/disables IME and switches to an IME.
[scriptable, uuid(e51a6fa0-ef85-11e2-b778-0800200c9a66)]
interface nsIInputMethodManager : nsISupports
{
  // Ask the OS to show a list of available IMEs for users to switch from.
  // OS should ignore this request if the app is currently not the active one.
  void showAll();

  // Ask the OS to switch away from the current active Keyboard app.
  // OS should ignore this request if the app is currently not the active one.
  void next();

  // To know if the OS supports IME switching or not.
  // Use case: let the keyboard app knows if it is necessary to show the "IME switching"
  // (globe) button. We have a use case that when there is only one IME enabled, we
  // should not show the globe icon.
  boolean supportsSwitching();

  // Ask the OS to hide the current active Keyboard app. (was: |removeFocus()|)
  // OS should ignore this request if the app is currently not the active one.
  // The OS will void the current input context (if it exists).
  // This method belong to |mgmt| because we would like to allow Keyboard to access to
  // this method w/o a input context.
  void hide();
};

[scriptable, uuid(4607330d-e7d2-40a4-9eb8-43967eae0142)]
interface nsIInputMethod : nsISupports
{
  // Input Method Manager contain a few global methods expose to apps
  readonly attribute nsIInputMethodManager mgmt;

  // Fired when the input context changes, include changes from and to null.
  // The new InputContext instance will be available in the event object under |inputcontext| property.
  // When it changes to null it means the app (the user of this API) no longer has the control of the original focused input field.
  // Note that if the app saves the original context, it might get void; implementation decides when to void the input context.
  readonly attribute nsIB2GInputContext inputcontext;

  // An "input context" is mapped to a text field that the app is allow to mutate.
  // this attribute should be null when there is no text field currently focused.
  attribute nsIDOMEventListener oninputcontextchange;
};
