/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['utils/eql.js']) {
  _$jscoverage['utils/eql.js'] = [];
  _$jscoverage['utils/eql.js'][5] = 0;
  _$jscoverage['utils/eql.js'][8] = 0;
  _$jscoverage['utils/eql.js'][9] = 0;
  _$jscoverage['utils/eql.js'][11] = 0;
  _$jscoverage['utils/eql.js'][16] = 0;
  _$jscoverage['utils/eql.js'][18] = 0;
  _$jscoverage['utils/eql.js'][19] = 0;
  _$jscoverage['utils/eql.js'][21] = 0;
  _$jscoverage['utils/eql.js'][22] = 0;
  _$jscoverage['utils/eql.js'][24] = 0;
  _$jscoverage['utils/eql.js'][25] = 0;
  _$jscoverage['utils/eql.js'][28] = 0;
  _$jscoverage['utils/eql.js'][32] = 0;
  _$jscoverage['utils/eql.js'][33] = 0;
  _$jscoverage['utils/eql.js'][37] = 0;
  _$jscoverage['utils/eql.js'][38] = 0;
  _$jscoverage['utils/eql.js'][47] = 0;
  _$jscoverage['utils/eql.js'][51] = 0;
  _$jscoverage['utils/eql.js'][52] = 0;
  _$jscoverage['utils/eql.js'][55] = 0;
  _$jscoverage['utils/eql.js'][56] = 0;
  _$jscoverage['utils/eql.js'][59] = 0;
  _$jscoverage['utils/eql.js'][60] = 0;
  _$jscoverage['utils/eql.js'][61] = 0;
  _$jscoverage['utils/eql.js'][63] = 0;
  _$jscoverage['utils/eql.js'][66] = 0;
  _$jscoverage['utils/eql.js'][67] = 0;
  _$jscoverage['utils/eql.js'][68] = 0;
  _$jscoverage['utils/eql.js'][70] = 0;
  _$jscoverage['utils/eql.js'][71] = 0;
  _$jscoverage['utils/eql.js'][72] = 0;
  _$jscoverage['utils/eql.js'][74] = 0;
  _$jscoverage['utils/eql.js'][75] = 0;
  _$jscoverage['utils/eql.js'][79] = 0;
  _$jscoverage['utils/eql.js'][83] = 0;
  _$jscoverage['utils/eql.js'][84] = 0;
  _$jscoverage['utils/eql.js'][86] = 0;
  _$jscoverage['utils/eql.js'][87] = 0;
  _$jscoverage['utils/eql.js'][89] = 0;
  _$jscoverage['utils/eql.js'][90] = 0;
  _$jscoverage['utils/eql.js'][91] = 0;
  _$jscoverage['utils/eql.js'][95] = 0;
  _$jscoverage['utils/eql.js'][96] = 0;
  _$jscoverage['utils/eql.js'][97] = 0;
  _$jscoverage['utils/eql.js'][99] = 0;
}
_$jscoverage['utils/eql.js'][5]++;
module.exports = _deepEqual;
_$jscoverage['utils/eql.js'][8]++;
if (! Buffer) {
  _$jscoverage['utils/eql.js'][9]++;
  var Buffer = {isBuffer: (function () {
  _$jscoverage['utils/eql.js'][11]++;
  return false;
})};
}
_$jscoverage['utils/eql.js'][16]++;
function _deepEqual(actual, expected) {
  _$jscoverage['utils/eql.js'][18]++;
  if (actual === expected) {
    _$jscoverage['utils/eql.js'][19]++;
    return true;
  }
  else {
    _$jscoverage['utils/eql.js'][21]++;
    if (Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {
      _$jscoverage['utils/eql.js'][22]++;
      if (actual.length != expected.length) {
        _$jscoverage['utils/eql.js'][22]++;
        return false;
      }
      _$jscoverage['utils/eql.js'][24]++;
      for (var i = 0; i < actual.length; i++) {
        _$jscoverage['utils/eql.js'][25]++;
        if (actual[i] !== expected[i]) {
          _$jscoverage['utils/eql.js'][25]++;
          return false;
        }
}
      _$jscoverage['utils/eql.js'][28]++;
      return true;
    }
    else {
      _$jscoverage['utils/eql.js'][32]++;
      if (actual instanceof Date && expected instanceof Date) {
        _$jscoverage['utils/eql.js'][33]++;
        return actual.getTime() === expected.getTime();
      }
      else {
        _$jscoverage['utils/eql.js'][37]++;
        if (typeof actual != "object" && typeof expected != "object") {
          _$jscoverage['utils/eql.js'][38]++;
          return actual === expected;
        }
        else {
          _$jscoverage['utils/eql.js'][47]++;
          return objEquiv(actual, expected);
        }
      }
    }
  }
}
_$jscoverage['utils/eql.js'][51]++;
function isUndefinedOrNull(value) {
  _$jscoverage['utils/eql.js'][52]++;
  return value === null || value === undefined;
}
_$jscoverage['utils/eql.js'][55]++;
function isArguments(object) {
  _$jscoverage['utils/eql.js'][56]++;
  return Object.prototype.toString.call(object) == "[object Arguments]";
}
_$jscoverage['utils/eql.js'][59]++;
function objEquiv(a, b) {
  _$jscoverage['utils/eql.js'][60]++;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) {
    _$jscoverage['utils/eql.js'][61]++;
    return false;
  }
  _$jscoverage['utils/eql.js'][63]++;
  if (a.prototype !== b.prototype) {
    _$jscoverage['utils/eql.js'][63]++;
    return false;
  }
  _$jscoverage['utils/eql.js'][66]++;
  if (isArguments(a)) {
    _$jscoverage['utils/eql.js'][67]++;
    if (! isArguments(b)) {
      _$jscoverage['utils/eql.js'][68]++;
      return false;
    }
    _$jscoverage['utils/eql.js'][70]++;
    a = pSlice.call(a);
    _$jscoverage['utils/eql.js'][71]++;
    b = pSlice.call(b);
    _$jscoverage['utils/eql.js'][72]++;
    return _deepEqual(a, b);
  }
  _$jscoverage['utils/eql.js'][74]++;
  try {
    _$jscoverage['utils/eql.js'][75]++;
    var ka = Object.keys(a), kb = Object.keys(b), key, i;
  }
  catch (e) {
    _$jscoverage['utils/eql.js'][79]++;
    return false;
  }
  _$jscoverage['utils/eql.js'][83]++;
  if (ka.length != kb.length) {
    _$jscoverage['utils/eql.js'][84]++;
    return false;
  }
  _$jscoverage['utils/eql.js'][86]++;
  ka.sort();
  _$jscoverage['utils/eql.js'][87]++;
  kb.sort();
  _$jscoverage['utils/eql.js'][89]++;
  for (i = ka.length - 1; i >= 0; i--) {
    _$jscoverage['utils/eql.js'][90]++;
    if (ka[i] != kb[i]) {
      _$jscoverage['utils/eql.js'][91]++;
      return false;
    }
}
  _$jscoverage['utils/eql.js'][95]++;
  for (i = ka.length - 1; i >= 0; i--) {
    _$jscoverage['utils/eql.js'][96]++;
    key = ka[i];
    _$jscoverage['utils/eql.js'][97]++;
    if (! _deepEqual(a[key], b[key])) {
      _$jscoverage['utils/eql.js'][97]++;
      return false;
    }
}
  _$jscoverage['utils/eql.js'][99]++;
  return true;
}
_$jscoverage['utils/eql.js'].source = ["// This is directly from Node.js assert","// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/assert.js","","","module.exports = _deepEqual;","","// For browser implementation","if (!Buffer) {","  var Buffer = {","    isBuffer: function () {","      return false;","    }","  };","}","","function _deepEqual(actual, expected) {","  // 7.1. All identical values are equivalent, as determined by ===.","  if (actual === expected) {","    return true;","","  } else if (Buffer.isBuffer(actual) &amp;&amp; Buffer.isBuffer(expected)) {","    if (actual.length != expected.length) return false;","","    for (var i = 0; i &lt; actual.length; i++) {","      if (actual[i] !== expected[i]) return false;","    }","","    return true;","","  // 7.2. If the expected value is a Date object, the actual value is","  // equivalent if it is also a Date object that refers to the same time.","  } else if (actual instanceof Date &amp;&amp; expected instanceof Date) {","    return actual.getTime() === expected.getTime();","","  // 7.3. Other pairs that do not both pass typeof value == 'object',","  // equivalence is determined by ==.","  } else if (typeof actual != 'object' &amp;&amp; typeof expected != 'object') {","    return actual === expected;","","  // 7.4. For all other Object pairs, including Array objects, equivalence is","  // determined by having the same number of owned properties (as verified","  // with Object.prototype.hasOwnProperty.call), the same set of keys","  // (although not necessarily the same order), equivalent values for every","  // corresponding key, and an identical 'prototype' property. Note: this","  // accounts for both named and indexed properties on Arrays.","  } else {","    return objEquiv(actual, expected);","  }","}","","function isUndefinedOrNull(value) {","  return value === null || value === undefined;","}","","function isArguments(object) {","  return Object.prototype.toString.call(object) == '[object Arguments]';","}","","function objEquiv(a, b) {","  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))","    return false;","  // an identical 'prototype' property.","  if (a.prototype !== b.prototype) return false;","  //~~~I've managed to break Object.keys through screwy arguments passing.","  //   Converting to array solves the problem.","  if (isArguments(a)) {","    if (!isArguments(b)) {","      return false;","    }","    a = pSlice.call(a);","    b = pSlice.call(b);","    return _deepEqual(a, b);","  }","  try {","    var ka = Object.keys(a),","        kb = Object.keys(b),","        key, i;","  } catch (e) {//happens when one is a string literal and the other isn't","    return false;","  }","  // having the same number of owned properties (keys incorporates","  // hasOwnProperty)","  if (ka.length != kb.length)","    return false;","  //the same set of keys (although not necessarily the same order),","  ka.sort();","  kb.sort();","  //~~~cheap key test","  for (i = ka.length - 1; i &gt;= 0; i--) {","    if (ka[i] != kb[i])","      return false;","  }","  //equivalent values for every corresponding key, and","  //~~~possibly expensive deep test","  for (i = ka.length - 1; i &gt;= 0; i--) {","    key = ka[i];","    if (!_deepEqual(a[key], b[key])) return false;","  }","  return true;","}"];
