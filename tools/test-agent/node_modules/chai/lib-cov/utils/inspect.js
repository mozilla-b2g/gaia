/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['utils/inspect.js']) {
  _$jscoverage['utils/inspect.js'] = [];
  _$jscoverage['utils/inspect.js'][4] = 0;
  _$jscoverage['utils/inspect.js'][17] = 0;
  _$jscoverage['utils/inspect.js'][18] = 0;
  _$jscoverage['utils/inspect.js'][21] = 0;
  _$jscoverage['utils/inspect.js'][23] = 0;
  _$jscoverage['utils/inspect.js'][26] = 0;
  _$jscoverage['utils/inspect.js'][29] = 0;
  _$jscoverage['utils/inspect.js'][34] = 0;
  _$jscoverage['utils/inspect.js'][38] = 0;
  _$jscoverage['utils/inspect.js'][39] = 0;
  _$jscoverage['utils/inspect.js'][40] = 0;
  _$jscoverage['utils/inspect.js'][44] = 0;
  _$jscoverage['utils/inspect.js'][45] = 0;
  _$jscoverage['utils/inspect.js'][48] = 0;
  _$jscoverage['utils/inspect.js'][49] = 0;
  _$jscoverage['utils/inspect.js'][50] = 0;
  _$jscoverage['utils/inspect.js'][51] = 0;
  _$jscoverage['utils/inspect.js'][53] = 0;
  _$jscoverage['utils/inspect.js'][54] = 0;
  _$jscoverage['utils/inspect.js'][56] = 0;
  _$jscoverage['utils/inspect.js'][57] = 0;
  _$jscoverage['utils/inspect.js'][59] = 0;
  _$jscoverage['utils/inspect.js'][60] = 0;
  _$jscoverage['utils/inspect.js'][64] = 0;
  _$jscoverage['utils/inspect.js'][67] = 0;
  _$jscoverage['utils/inspect.js'][68] = 0;
  _$jscoverage['utils/inspect.js'][69] = 0;
  _$jscoverage['utils/inspect.js'][73] = 0;
  _$jscoverage['utils/inspect.js'][74] = 0;
  _$jscoverage['utils/inspect.js'][75] = 0;
  _$jscoverage['utils/inspect.js'][79] = 0;
  _$jscoverage['utils/inspect.js'][80] = 0;
  _$jscoverage['utils/inspect.js'][84] = 0;
  _$jscoverage['utils/inspect.js'][85] = 0;
  _$jscoverage['utils/inspect.js'][89] = 0;
  _$jscoverage['utils/inspect.js'][90] = 0;
  _$jscoverage['utils/inspect.js'][93] = 0;
  _$jscoverage['utils/inspect.js'][94] = 0;
  _$jscoverage['utils/inspect.js'][97] = 0;
  _$jscoverage['utils/inspect.js'][98] = 0;
  _$jscoverage['utils/inspect.js'][99] = 0;
  _$jscoverage['utils/inspect.js'][101] = 0;
  _$jscoverage['utils/inspect.js'][105] = 0;
  _$jscoverage['utils/inspect.js'][107] = 0;
  _$jscoverage['utils/inspect.js'][108] = 0;
  _$jscoverage['utils/inspect.js'][109] = 0;
  _$jscoverage['utils/inspect.js'][111] = 0;
  _$jscoverage['utils/inspect.js'][112] = 0;
  _$jscoverage['utils/inspect.js'][116] = 0;
  _$jscoverage['utils/inspect.js'][118] = 0;
  _$jscoverage['utils/inspect.js'][122] = 0;
  _$jscoverage['utils/inspect.js'][123] = 0;
  _$jscoverage['utils/inspect.js'][125] = 0;
  _$jscoverage['utils/inspect.js'][128] = 0;
  _$jscoverage['utils/inspect.js'][131] = 0;
  _$jscoverage['utils/inspect.js'][134] = 0;
  _$jscoverage['utils/inspect.js'][137] = 0;
  _$jscoverage['utils/inspect.js'][140] = 0;
  _$jscoverage['utils/inspect.js'][141] = 0;
  _$jscoverage['utils/inspect.js'][146] = 0;
  _$jscoverage['utils/inspect.js'][147] = 0;
  _$jscoverage['utils/inspect.js'][151] = 0;
  _$jscoverage['utils/inspect.js'][152] = 0;
  _$jscoverage['utils/inspect.js'][153] = 0;
  _$jscoverage['utils/inspect.js'][154] = 0;
  _$jscoverage['utils/inspect.js'][155] = 0;
  _$jscoverage['utils/inspect.js'][158] = 0;
  _$jscoverage['utils/inspect.js'][161] = 0;
  _$jscoverage['utils/inspect.js'][162] = 0;
  _$jscoverage['utils/inspect.js'][163] = 0;
  _$jscoverage['utils/inspect.js'][167] = 0;
  _$jscoverage['utils/inspect.js'][171] = 0;
  _$jscoverage['utils/inspect.js'][172] = 0;
  _$jscoverage['utils/inspect.js'][173] = 0;
  _$jscoverage['utils/inspect.js'][174] = 0;
  _$jscoverage['utils/inspect.js'][175] = 0;
  _$jscoverage['utils/inspect.js'][176] = 0;
  _$jscoverage['utils/inspect.js'][178] = 0;
  _$jscoverage['utils/inspect.js'][181] = 0;
  _$jscoverage['utils/inspect.js'][182] = 0;
  _$jscoverage['utils/inspect.js'][186] = 0;
  _$jscoverage['utils/inspect.js'][187] = 0;
  _$jscoverage['utils/inspect.js'][189] = 0;
  _$jscoverage['utils/inspect.js'][190] = 0;
  _$jscoverage['utils/inspect.js'][191] = 0;
  _$jscoverage['utils/inspect.js'][192] = 0;
  _$jscoverage['utils/inspect.js'][194] = 0;
  _$jscoverage['utils/inspect.js'][196] = 0;
  _$jscoverage['utils/inspect.js'][197] = 0;
  _$jscoverage['utils/inspect.js'][198] = 0;
  _$jscoverage['utils/inspect.js'][199] = 0;
  _$jscoverage['utils/inspect.js'][202] = 0;
  _$jscoverage['utils/inspect.js'][203] = 0;
  _$jscoverage['utils/inspect.js'][208] = 0;
  _$jscoverage['utils/inspect.js'][211] = 0;
  _$jscoverage['utils/inspect.js'][212] = 0;
  _$jscoverage['utils/inspect.js'][213] = 0;
  _$jscoverage['utils/inspect.js'][215] = 0;
  _$jscoverage['utils/inspect.js'][216] = 0;
  _$jscoverage['utils/inspect.js'][217] = 0;
  _$jscoverage['utils/inspect.js'][218] = 0;
  _$jscoverage['utils/inspect.js'][220] = 0;
  _$jscoverage['utils/inspect.js'][223] = 0;
  _$jscoverage['utils/inspect.js'][227] = 0;
  _$jscoverage['utils/inspect.js'][231] = 0;
  _$jscoverage['utils/inspect.js'][232] = 0;
  _$jscoverage['utils/inspect.js'][233] = 0;
  _$jscoverage['utils/inspect.js'][234] = 0;
  _$jscoverage['utils/inspect.js'][235] = 0;
  _$jscoverage['utils/inspect.js'][236] = 0;
  _$jscoverage['utils/inspect.js'][239] = 0;
  _$jscoverage['utils/inspect.js'][240] = 0;
  _$jscoverage['utils/inspect.js'][248] = 0;
  _$jscoverage['utils/inspect.js'][251] = 0;
  _$jscoverage['utils/inspect.js'][252] = 0;
  _$jscoverage['utils/inspect.js'][256] = 0;
  _$jscoverage['utils/inspect.js'][257] = 0;
  _$jscoverage['utils/inspect.js'][260] = 0;
  _$jscoverage['utils/inspect.js'][261] = 0;
  _$jscoverage['utils/inspect.js'][264] = 0;
  _$jscoverage['utils/inspect.js'][265] = 0;
  _$jscoverage['utils/inspect.js'][268] = 0;
  _$jscoverage['utils/inspect.js'][269] = 0;
}
_$jscoverage['utils/inspect.js'][4]++;
module.exports = inspect;
_$jscoverage['utils/inspect.js'][17]++;
function inspect(obj, showHidden, depth, colors) {
  _$jscoverage['utils/inspect.js'][18]++;
  var ctx = {showHidden: showHidden, seen: [], stylize: (function (str) {
  _$jscoverage['utils/inspect.js'][21]++;
  return str;
})};
  _$jscoverage['utils/inspect.js'][23]++;
  return formatValue(ctx, obj, (typeof depth === "undefined"? 2: depth));
}
_$jscoverage['utils/inspect.js'][26]++;
function formatValue(ctx, value, recurseTimes) {
  _$jscoverage['utils/inspect.js'][29]++;
  if (value && typeof value.inspect === "function" && value.inspect !== exports.inspect && ! (value.constructor && value.constructor.prototype === value)) {
    _$jscoverage['utils/inspect.js'][34]++;
    return value.inspect(recurseTimes);
  }
  _$jscoverage['utils/inspect.js'][38]++;
  var primitive = formatPrimitive(ctx, value);
  _$jscoverage['utils/inspect.js'][39]++;
  if (primitive) {
    _$jscoverage['utils/inspect.js'][40]++;
    return primitive;
  }
  _$jscoverage['utils/inspect.js'][44]++;
  var visibleKeys = Object.keys(value);
  _$jscoverage['utils/inspect.js'][45]++;
  var keys = ctx.showHidden? Object.getOwnPropertyNames(value): visibleKeys;
  _$jscoverage['utils/inspect.js'][48]++;
  if (keys.length === 0) {
    _$jscoverage['utils/inspect.js'][49]++;
    if (typeof value === "function") {
      _$jscoverage['utils/inspect.js'][50]++;
      var name = value.name? ": " + value.name: "";
      _$jscoverage['utils/inspect.js'][51]++;
      return ctx.stylize("[Function" + name + "]", "special");
    }
    _$jscoverage['utils/inspect.js'][53]++;
    if (isRegExp(value)) {
      _$jscoverage['utils/inspect.js'][54]++;
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    }
    _$jscoverage['utils/inspect.js'][56]++;
    if (isDate(value)) {
      _$jscoverage['utils/inspect.js'][57]++;
      return ctx.stylize(Date.prototype.toUTCString.call(value), "date");
    }
    _$jscoverage['utils/inspect.js'][59]++;
    if (isError(value)) {
      _$jscoverage['utils/inspect.js'][60]++;
      return formatError(value);
    }
  }
  _$jscoverage['utils/inspect.js'][64]++;
  var base = "", array = false, braces = ["{", "}"];
  _$jscoverage['utils/inspect.js'][67]++;
  if (isArray(value)) {
    _$jscoverage['utils/inspect.js'][68]++;
    array = true;
    _$jscoverage['utils/inspect.js'][69]++;
    braces = ["[", "]"];
  }
  _$jscoverage['utils/inspect.js'][73]++;
  if (typeof value === "function") {
    _$jscoverage['utils/inspect.js'][74]++;
    var n = value.name? ": " + value.name: "";
    _$jscoverage['utils/inspect.js'][75]++;
    base = " [Function" + n + "]";
  }
  _$jscoverage['utils/inspect.js'][79]++;
  if (isRegExp(value)) {
    _$jscoverage['utils/inspect.js'][80]++;
    base = " " + RegExp.prototype.toString.call(value);
  }
  _$jscoverage['utils/inspect.js'][84]++;
  if (isDate(value)) {
    _$jscoverage['utils/inspect.js'][85]++;
    base = " " + Date.prototype.toUTCString.call(value);
  }
  _$jscoverage['utils/inspect.js'][89]++;
  if (isError(value)) {
    _$jscoverage['utils/inspect.js'][90]++;
    base = " " + formatError(value);
  }
  _$jscoverage['utils/inspect.js'][93]++;
  if (keys.length === 0 && (! array || value.length == 0)) {
    _$jscoverage['utils/inspect.js'][94]++;
    return braces[0] + base + braces[1];
  }
  _$jscoverage['utils/inspect.js'][97]++;
  if (recurseTimes < 0) {
    _$jscoverage['utils/inspect.js'][98]++;
    if (isRegExp(value)) {
      _$jscoverage['utils/inspect.js'][99]++;
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    }
    else {
      _$jscoverage['utils/inspect.js'][101]++;
      return ctx.stylize("[Object]", "special");
    }
  }
  _$jscoverage['utils/inspect.js'][105]++;
  ctx.seen.push(value);
  _$jscoverage['utils/inspect.js'][107]++;
  var output;
  _$jscoverage['utils/inspect.js'][108]++;
  if (array) {
    _$jscoverage['utils/inspect.js'][109]++;
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  }
  else {
    _$jscoverage['utils/inspect.js'][111]++;
    output = keys.map((function (key) {
  _$jscoverage['utils/inspect.js'][112]++;
  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
}));
  }
  _$jscoverage['utils/inspect.js'][116]++;
  ctx.seen.pop();
  _$jscoverage['utils/inspect.js'][118]++;
  return reduceToSingleString(output, base, braces);
}
_$jscoverage['utils/inspect.js'][122]++;
function formatPrimitive(ctx, value) {
  _$jscoverage['utils/inspect.js'][123]++;
  switch (typeof value) {
  case "undefined":
    _$jscoverage['utils/inspect.js'][125]++;
    return ctx.stylize("undefined", "undefined");
  case "string":
    _$jscoverage['utils/inspect.js'][128]++;
    var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, "\"") + "'";
    _$jscoverage['utils/inspect.js'][131]++;
    return ctx.stylize(simple, "string");
  case "number":
    _$jscoverage['utils/inspect.js'][134]++;
    return ctx.stylize("" + value, "number");
  case "boolean":
    _$jscoverage['utils/inspect.js'][137]++;
    return ctx.stylize("" + value, "boolean");
  }
  _$jscoverage['utils/inspect.js'][140]++;
  if (value === null) {
    _$jscoverage['utils/inspect.js'][141]++;
    return ctx.stylize("null", "null");
  }
}
_$jscoverage['utils/inspect.js'][146]++;
function formatError(value) {
  _$jscoverage['utils/inspect.js'][147]++;
  return "[" + Error.prototype.toString.call(value) + "]";
}
_$jscoverage['utils/inspect.js'][151]++;
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  _$jscoverage['utils/inspect.js'][152]++;
  var output = [];
  _$jscoverage['utils/inspect.js'][153]++;
  for (var i = 0, l = value.length; i < l; ++i) {
    _$jscoverage['utils/inspect.js'][154]++;
    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
      _$jscoverage['utils/inspect.js'][155]++;
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    }
    else {
      _$jscoverage['utils/inspect.js'][158]++;
      output.push("");
    }
}
  _$jscoverage['utils/inspect.js'][161]++;
  keys.forEach((function (key) {
  _$jscoverage['utils/inspect.js'][162]++;
  if (! key.match(/^\d+$/)) {
    _$jscoverage['utils/inspect.js'][163]++;
    output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
  }
}));
  _$jscoverage['utils/inspect.js'][167]++;
  return output;
}
_$jscoverage['utils/inspect.js'][171]++;
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  _$jscoverage['utils/inspect.js'][172]++;
  var name, str;
  _$jscoverage['utils/inspect.js'][173]++;
  if (value.__lookupGetter__) {
    _$jscoverage['utils/inspect.js'][174]++;
    if (value.__lookupGetter__(key)) {
      _$jscoverage['utils/inspect.js'][175]++;
      if (value.__lookupSetter__(key)) {
        _$jscoverage['utils/inspect.js'][176]++;
        str = ctx.stylize("[Getter/Setter]", "special");
      }
      else {
        _$jscoverage['utils/inspect.js'][178]++;
        str = ctx.stylize("[Getter]", "special");
      }
    }
    else {
      _$jscoverage['utils/inspect.js'][181]++;
      if (value.__lookupSetter__(key)) {
        _$jscoverage['utils/inspect.js'][182]++;
        str = ctx.stylize("[Setter]", "special");
      }
    }
  }
  _$jscoverage['utils/inspect.js'][186]++;
  if (visibleKeys.indexOf(key) < 0) {
    _$jscoverage['utils/inspect.js'][187]++;
    name = "[" + key + "]";
  }
  _$jscoverage['utils/inspect.js'][189]++;
  if (! str) {
    _$jscoverage['utils/inspect.js'][190]++;
    if (ctx.seen.indexOf(value[key]) < 0) {
      _$jscoverage['utils/inspect.js'][191]++;
      if (recurseTimes === null) {
        _$jscoverage['utils/inspect.js'][192]++;
        str = formatValue(ctx, value[key], null);
      }
      else {
        _$jscoverage['utils/inspect.js'][194]++;
        str = formatValue(ctx, value[key], recurseTimes - 1);
      }
      _$jscoverage['utils/inspect.js'][196]++;
      if (str.indexOf("\n") > -1) {
        _$jscoverage['utils/inspect.js'][197]++;
        if (array) {
          _$jscoverage['utils/inspect.js'][198]++;
          str = str.split("\n").map((function (line) {
  _$jscoverage['utils/inspect.js'][199]++;
  return "  " + line;
})).join("\n").substr(2);
        }
        else {
          _$jscoverage['utils/inspect.js'][202]++;
          str = "\n" + str.split("\n").map((function (line) {
  _$jscoverage['utils/inspect.js'][203]++;
  return "   " + line;
})).join("\n");
        }
      }
    }
    else {
      _$jscoverage['utils/inspect.js'][208]++;
      str = ctx.stylize("[Circular]", "special");
    }
  }
  _$jscoverage['utils/inspect.js'][211]++;
  if (typeof name === "undefined") {
    _$jscoverage['utils/inspect.js'][212]++;
    if (array && key.match(/^\d+$/)) {
      _$jscoverage['utils/inspect.js'][213]++;
      return str;
    }
    _$jscoverage['utils/inspect.js'][215]++;
    name = JSON.stringify("" + key);
    _$jscoverage['utils/inspect.js'][216]++;
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      _$jscoverage['utils/inspect.js'][217]++;
      name = name.substr(1, name.length - 2);
      _$jscoverage['utils/inspect.js'][218]++;
      name = ctx.stylize(name, "name");
    }
    else {
      _$jscoverage['utils/inspect.js'][220]++;
      name = name.replace(/'/g, "\\'").replace(/\\"/g, "\"").replace(/(^"|"$)/g, "'");
      _$jscoverage['utils/inspect.js'][223]++;
      name = ctx.stylize(name, "string");
    }
  }
  _$jscoverage['utils/inspect.js'][227]++;
  return name + ": " + str;
}
_$jscoverage['utils/inspect.js'][231]++;
function reduceToSingleString(output, base, braces) {
  _$jscoverage['utils/inspect.js'][232]++;
  var numLinesEst = 0;
  _$jscoverage['utils/inspect.js'][233]++;
  var length = output.reduce((function (prev, cur) {
  _$jscoverage['utils/inspect.js'][234]++;
  numLinesEst++;
  _$jscoverage['utils/inspect.js'][235]++;
  if (cur.indexOf("\n") >= 0) {
    _$jscoverage['utils/inspect.js'][235]++;
    numLinesEst++;
  }
  _$jscoverage['utils/inspect.js'][236]++;
  return prev + cur.length + 1;
}), 0);
  _$jscoverage['utils/inspect.js'][239]++;
  if (length > 60) {
    _$jscoverage['utils/inspect.js'][240]++;
    return braces[0] + (base === ""? "": base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
  }
  _$jscoverage['utils/inspect.js'][248]++;
  return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
_$jscoverage['utils/inspect.js'][251]++;
function isArray(ar) {
  _$jscoverage['utils/inspect.js'][252]++;
  return Array.isArray(ar) || (typeof ar === "object" && objectToString(ar) === "[object Array]");
}
_$jscoverage['utils/inspect.js'][256]++;
function isRegExp(re) {
  _$jscoverage['utils/inspect.js'][257]++;
  return typeof re === "object" && objectToString(re) === "[object RegExp]";
}
_$jscoverage['utils/inspect.js'][260]++;
function isDate(d) {
  _$jscoverage['utils/inspect.js'][261]++;
  return typeof d === "object" && objectToString(d) === "[object Date]";
}
_$jscoverage['utils/inspect.js'][264]++;
function isError(e) {
  _$jscoverage['utils/inspect.js'][265]++;
  return typeof e === "object" && objectToString(e) === "[object Error]";
}
_$jscoverage['utils/inspect.js'][268]++;
function objectToString(o) {
  _$jscoverage['utils/inspect.js'][269]++;
  return Object.prototype.toString.call(o);
}
_$jscoverage['utils/inspect.js'].source = ["// This is (almost) directly from Node.js utils","// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js","","module.exports = inspect;","","/**"," * Echos the value of a value. Trys to print the value out"," * in the best way possible given the different types."," *"," * @param {Object} obj The object to print out."," * @param {Boolean} showHidden Flag that shows hidden (not enumerable)"," *    properties of objects."," * @param {Number} depth Depth in which to descend in object. Default is 2."," * @param {Boolean} colors Flag to turn on ANSI escape codes to color the"," *    output. Default is false (no coloring)."," */","function inspect(obj, showHidden, depth, colors) {","  var ctx = {","    showHidden: showHidden,","    seen: [],","    stylize: function (str) { return str; }","  };","  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));","}","","function formatValue(ctx, value, recurseTimes) {","  // Provide a hook for user-specified inspect functions.","  // Check that value is an object with an inspect function on it","  if (value &amp;&amp; typeof value.inspect === 'function' &amp;&amp;","      // Filter out the util module, it's inspect function is special","      value.inspect !== exports.inspect &amp;&amp;","      // Also filter out any prototype objects using the circular check.","      !(value.constructor &amp;&amp; value.constructor.prototype === value)) {","    return value.inspect(recurseTimes);","  }","","  // Primitive types cannot have properties","  var primitive = formatPrimitive(ctx, value);","  if (primitive) {","    return primitive;","  }","","  // Look up the keys of the object.","  var visibleKeys = Object.keys(value);","  var keys = ctx.showHidden ? Object.getOwnPropertyNames(value) : visibleKeys;","","  // Some type of object without properties can be shortcutted.","  if (keys.length === 0) {","    if (typeof value === 'function') {","      var name = value.name ? ': ' + value.name : '';","      return ctx.stylize('[Function' + name + ']', 'special');","    }","    if (isRegExp(value)) {","      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');","    }","    if (isDate(value)) {","      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');","    }","    if (isError(value)) {","      return formatError(value);","    }","  }","","  var base = '', array = false, braces = ['{', '}'];","","  // Make Array say that they are Array","  if (isArray(value)) {","    array = true;","    braces = ['[', ']'];","  }","","  // Make functions say that they are functions","  if (typeof value === 'function') {","    var n = value.name ? ': ' + value.name : '';","    base = ' [Function' + n + ']';","  }","","  // Make RegExps say that they are RegExps","  if (isRegExp(value)) {","    base = ' ' + RegExp.prototype.toString.call(value);","  }","","  // Make dates with properties first say the date","  if (isDate(value)) {","    base = ' ' + Date.prototype.toUTCString.call(value);","  }","","  // Make error with message first say the error","  if (isError(value)) {","    base = ' ' + formatError(value);","  }","","  if (keys.length === 0 &amp;&amp; (!array || value.length == 0)) {","    return braces[0] + base + braces[1];","  }","","  if (recurseTimes &lt; 0) {","    if (isRegExp(value)) {","      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');","    } else {","      return ctx.stylize('[Object]', 'special');","    }","  }","","  ctx.seen.push(value);","","  var output;","  if (array) {","    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);","  } else {","    output = keys.map(function(key) {","      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);","    });","  }","","  ctx.seen.pop();","","  return reduceToSingleString(output, base, braces);","}","","","function formatPrimitive(ctx, value) {","  switch (typeof value) {","    case 'undefined':","      return ctx.stylize('undefined', 'undefined');","","    case 'string':","      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')","                                               .replace(/'/g, \"\\\\'\")","                                               .replace(/\\\\\"/g, '\"') + '\\'';","      return ctx.stylize(simple, 'string');","","    case 'number':","      return ctx.stylize('' + value, 'number');","","    case 'boolean':","      return ctx.stylize('' + value, 'boolean');","  }","  // For some reason typeof null is \"object\", so special case here.","  if (value === null) {","    return ctx.stylize('null', 'null');","  }","}","","","function formatError(value) {","  return '[' + Error.prototype.toString.call(value) + ']';","}","","","function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {","  var output = [];","  for (var i = 0, l = value.length; i &lt; l; ++i) {","    if (Object.prototype.hasOwnProperty.call(value, String(i))) {","      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,","          String(i), true));","    } else {","      output.push('');","    }","  }","  keys.forEach(function(key) {","    if (!key.match(/^\\d+$/)) {","      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,","          key, true));","    }","  });","  return output;","}","","","function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {","  var name, str;","  if (value.__lookupGetter__) {","    if (value.__lookupGetter__(key)) {","      if (value.__lookupSetter__(key)) {","        str = ctx.stylize('[Getter/Setter]', 'special');","      } else {","        str = ctx.stylize('[Getter]', 'special');","      }","    } else {","      if (value.__lookupSetter__(key)) {","        str = ctx.stylize('[Setter]', 'special');","      }","    }","  }","  if (visibleKeys.indexOf(key) &lt; 0) {","    name = '[' + key + ']';","  }","  if (!str) {","    if (ctx.seen.indexOf(value[key]) &lt; 0) {","      if (recurseTimes === null) {","        str = formatValue(ctx, value[key], null);","      } else {","        str = formatValue(ctx, value[key], recurseTimes - 1);","      }","      if (str.indexOf('\\n') &gt; -1) {","        if (array) {","          str = str.split('\\n').map(function(line) {","            return '  ' + line;","          }).join('\\n').substr(2);","        } else {","          str = '\\n' + str.split('\\n').map(function(line) {","            return '   ' + line;","          }).join('\\n');","        }","      }","    } else {","      str = ctx.stylize('[Circular]', 'special');","    }","  }","  if (typeof name === 'undefined') {","    if (array &amp;&amp; key.match(/^\\d+$/)) {","      return str;","    }","    name = JSON.stringify('' + key);","    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {","      name = name.substr(1, name.length - 2);","      name = ctx.stylize(name, 'name');","    } else {","      name = name.replace(/'/g, \"\\\\'\")","                 .replace(/\\\\\"/g, '\"')","                 .replace(/(^\"|\"$)/g, \"'\");","      name = ctx.stylize(name, 'string');","    }","  }","","  return name + ': ' + str;","}","","","function reduceToSingleString(output, base, braces) {","  var numLinesEst = 0;","  var length = output.reduce(function(prev, cur) {","    numLinesEst++;","    if (cur.indexOf('\\n') &gt;= 0) numLinesEst++;","    return prev + cur.length + 1;","  }, 0);","","  if (length &gt; 60) {","    return braces[0] +","           (base === '' ? '' : base + '\\n ') +","           ' ' +","           output.join(',\\n  ') +","           ' ' +","           braces[1];","  }","","  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];","}","","function isArray(ar) {","  return Array.isArray(ar) ||","         (typeof ar === 'object' &amp;&amp; objectToString(ar) === '[object Array]');","}","","function isRegExp(re) {","  return typeof re === 'object' &amp;&amp; objectToString(re) === '[object RegExp]';","}","","function isDate(d) {","  return typeof d === 'object' &amp;&amp; objectToString(d) === '[object Date]';","}","","function isError(e) {","  return typeof e === 'object' &amp;&amp; objectToString(e) === '[object Error]';","}","","function objectToString(o) {","  return Object.prototype.toString.call(o);","}"];
