/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['interface/should.js']) {
  _$jscoverage['interface/should.js'] = [];
  _$jscoverage['interface/should.js'][7] = 0;
  _$jscoverage['interface/should.js'][8] = 0;
  _$jscoverage['interface/should.js'][10] = 0;
  _$jscoverage['interface/should.js'][12] = 0;
  _$jscoverage['interface/should.js'][15] = 0;
  _$jscoverage['interface/should.js'][16] = 0;
  _$jscoverage['interface/should.js'][17] = 0;
  _$jscoverage['interface/should.js'][18] = 0;
  _$jscoverage['interface/should.js'][20] = 0;
  _$jscoverage['interface/should.js'][25] = 0;
  _$jscoverage['interface/should.js'][27] = 0;
  _$jscoverage['interface/should.js'][28] = 0;
  _$jscoverage['interface/should.js'][31] = 0;
  _$jscoverage['interface/should.js'][32] = 0;
  _$jscoverage['interface/should.js'][35] = 0;
  _$jscoverage['interface/should.js'][36] = 0;
  _$jscoverage['interface/should.js'][40] = 0;
  _$jscoverage['interface/should.js'][42] = 0;
  _$jscoverage['interface/should.js'][43] = 0;
  _$jscoverage['interface/should.js'][46] = 0;
  _$jscoverage['interface/should.js'][47] = 0;
  _$jscoverage['interface/should.js'][50] = 0;
  _$jscoverage['interface/should.js'][51] = 0;
  _$jscoverage['interface/should.js'][54] = 0;
  _$jscoverage['interface/should.js'][55] = 0;
  _$jscoverage['interface/should.js'][57] = 0;
}
_$jscoverage['interface/should.js'][7]++;
module.exports = (function (chai) {
  _$jscoverage['interface/should.js'][8]++;
  var Assertion = chai.Assertion;
  _$jscoverage['interface/should.js'][10]++;
  chai.should = (function () {
  _$jscoverage['interface/should.js'][12]++;
  Object.defineProperty(Object.prototype, "should", {set: (function () {
}), get: (function () {
  _$jscoverage['interface/should.js'][15]++;
  if (this instanceof String || this instanceof Number) {
    _$jscoverage['interface/should.js'][16]++;
    return new Assertion(this.constructor(this));
  }
  else {
    _$jscoverage['interface/should.js'][17]++;
    if (this instanceof Boolean) {
      _$jscoverage['interface/should.js'][18]++;
      return new Assertion(this == true);
    }
  }
  _$jscoverage['interface/should.js'][20]++;
  return new Assertion(this);
}), configurable: true});
  _$jscoverage['interface/should.js'][25]++;
  var should = {};
  _$jscoverage['interface/should.js'][27]++;
  should.equal = (function (val1, val2) {
  _$jscoverage['interface/should.js'][28]++;
  new Assertion(val1).to.equal(val2);
});
  _$jscoverage['interface/should.js'][31]++;
  should.Throw = (function (fn, errt, errs) {
  _$jscoverage['interface/should.js'][32]++;
  new Assertion(fn).to.Throw(errt, errs);
});
  _$jscoverage['interface/should.js'][35]++;
  should.exist = (function (val) {
  _$jscoverage['interface/should.js'][36]++;
  new Assertion(val).to.exist;
});
  _$jscoverage['interface/should.js'][40]++;
  should.not = {};
  _$jscoverage['interface/should.js'][42]++;
  should.not.equal = (function (val1, val2) {
  _$jscoverage['interface/should.js'][43]++;
  new Assertion(val1).to.not.equal(val2);
});
  _$jscoverage['interface/should.js'][46]++;
  should.not.Throw = (function (fn, errt, errs) {
  _$jscoverage['interface/should.js'][47]++;
  new Assertion(fn).to.not.Throw(errt, errs);
});
  _$jscoverage['interface/should.js'][50]++;
  should.not.exist = (function (val) {
  _$jscoverage['interface/should.js'][51]++;
  new Assertion(val).to.not.exist;
});
  _$jscoverage['interface/should.js'][54]++;
  should["throw"] = should.Throw;
  _$jscoverage['interface/should.js'][55]++;
  should.not["throw"] = should.not.Throw;
  _$jscoverage['interface/should.js'][57]++;
  return should;
});
});
_$jscoverage['interface/should.js'].source = ["/*!"," * chai"," * Copyright(c) 2011 Jake Luer &lt;jake@alogicalparadox.com&gt;"," * MIT Licensed"," */","","module.exports = function (chai) {","  var Assertion = chai.Assertion;","","  chai.should = function () {","    // modify Object.prototype to have `should`","    Object.defineProperty(Object.prototype, 'should', {","      set: function(){},","      get: function(){","        if (this instanceof String || this instanceof Number) {","          return new Assertion(this.constructor(this));","        } else if (this instanceof Boolean) {","          return new Assertion(this == true);","        }","        return new Assertion(this);","      },","      configurable: true","    });","","    var should = {};","","    should.equal = function (val1, val2) {","      new Assertion(val1).to.equal(val2);","    };","","    should.Throw = function (fn, errt, errs) {","      new Assertion(fn).to.Throw(errt, errs);","    };","","    should.exist = function (val) {","      new Assertion(val).to.exist;","    }","","    // negation","    should.not = {}","","    should.not.equal = function (val1, val2) {","      new Assertion(val1).to.not.equal(val2);","    };","","    should.not.Throw = function (fn, errt, errs) {","      new Assertion(fn).to.not.Throw(errt, errs);","    };","","    should.not.exist = function (val) {","      new Assertion(val).to.not.exist;","    }","","    should['throw'] = should['Throw'];","    should.not['throw'] = should.not['Throw'];","","    return should;","  };","};"];
