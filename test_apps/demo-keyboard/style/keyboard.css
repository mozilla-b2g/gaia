@font-face {
  font-family: 'Keyboard Symbols';
  font-weight: 600;
  src: url('fonts/Keyboard-Symbols.woff');
}

* {
  -moz-box-sizing: border-box;
}

html {
  /*
   * We define the font size so that 1/32nd of the screen width is one rem.
   * We'll change this in landscape mode to be 1/64th of the screen width
   */
  font-size: 3.125vw;
  pointer-events: none;
}

body {
  margin: 0;
  padding: 0;
}

#keyboardContainer {
  position: absolute;
  width: 100%;
  height: 23.6rem; /* 20.4rem keyboard, 3rem word suggestions 0.2 rem border*/
  bottom: 0;
  pointer-events: auto;
  font-family: sans-serif;
  border-top: 0.2rem solid #5b6668;
  padding: 0;
  margin: 0;
}

.page {
  position: absolute;
  width: 100%;
  height: 20.4rem;
  left:0;
  bottom:0;
  background-color: #606b6e;
  z-index: 1;
}

.page.hidden {
  z-index: 0;
}

/*
 * We could handle the shift key by switching to a completely new layout.
 * Instead, we do it with a text transform.
 */
.page.shifted {
  text-transform: capitalize;
}

/*
 * The shift key needs a special highlighting when we are shifted.
 * We'll need different highlighting when we're in shift lock mode.
 * So this may have to be done with JS instead of CSS. But this works for now.
 */
.page.shifted .key[data-name=SHIFT] {
  color: #00caf2;
}

/*
 * When caps lock is on, we put a .4rem blue bar along the bottom of the key.
 * We convert the bottom margin to a border, and have to increase the
 * height of the key by 0.4rem to make this work.
 */
.page.locked .key[data-name=SHIFT] {
  border-bottom: solid #00caf2 0.4rem;
  margin-bottom: 0;
  height: 4.7rem;
}

.row {
  text-align: center;
  height: 5.1rem;
}

.row:nth-child(1) {
  background-color: #606b6e;
}
.row:nth-child(2) {
  background-color: #5b6668;
}
.row:nth-child(3) {
  background-color: #566061;
}
.row:nth-child(4) {
  background-color: #525c5e;
}

.row:nth-child(1) .key {
  border-right-color: #525b5e;
}
.row:nth-child(2) .key {
  border-right-color: #4c5657;
}
.row:nth-child(3) .key {
  border-right-color: #475052;
}
.row:nth-child(4) .key {
  border-right-color: #434b4d;
}

/*
 * The last key in a row should not have a visible border
 * But to keep size calculations consistent we just make it transparent
 * rather than turning it off.
 */
.row .key:last-child {
  border-right-color: transparent;
}

.key {
  position:relative;
  display: inline-block;
  min-width: 2.6rem;
  /*
   * This height plus the top and bottom margin makes an overall height of
   * 5.1rem per row. The reason for the margin is that it prevents the left
   * and right borders from going all the way to the top and bottom of the row.
   */
  height: 4.3rem;
  margin: 0.4rem 0;
  padding: 0;

  background: none;
  color: white;

  border-right: 0.1rem solid #525b5e;
  border-left: 0.1rem solid transparent;

  font-weight: normal;
  font-size: 2.4rem;
  line-height: 4.3rem;
  text-align: center;
  vertical-align: top;

  z-index: 10;
}

.key.symbolfont {
  font-family: Keyboard Symbols;
}

.key.specialkey:not([data-name=SPACE]) {
  font-size: 1.5rem;
  font-weight: 500;
  color: #abb0b1;
}

/*
 * When a key is touched, change its appearance.
 * We use this same appearance when the alternatives menu is shown
 */
.key:not(.specialkey).touched, .key.altshown {
  /* color changes */
  color: #00caf2;
  background-color: #4a5255;

  /*
   * We had a 0.4rem margin top and bottom so that the borders don't extend
   * all the way up and down. But when we highlight, we want the highlight
   * to go all the way up and down. So we set the margin to 0 and replace
   * it with padding on the top and bottom. But since we're using border-box
   * sizing, the padding is part of the height and we have to add .8rem
   * to the key height.
   */
  margin: 0;
  padding: 0.4rem 0.1rem 0.4rem 0.2rem;
  height: 5.1rem;

  /*
   * When we highlight the key, we remove the left and right borders and
   * add the border width to the left and right padding to keep the overall
   * border-box width the same. This typically does not make a difference
   * because the size of the keys are determined by a min-width property.
   *
   * Also, we want to cover up the border-right of the key to the left
   * of this one, so we move the key over to the left just a bit. This
   * is why we have an extra 0.1rem of left padding above so that the keycap
   * does not appear to move
   */
  border: none;
  transform: translateX(-0.1rem);
}

.key:not(.specialkey).touched::before {
  content: attr(data-keycap);

  position: absolute;
  display:block;

  top: -5.6rem;
  left: calc(50% - 2.8rem);
  width: 5.6rem;
  height: 5.6rem;
  color: #fff;
  font-size: 2.8rem;
  line-height: 5.6rem;
  border-radius: 50%;
  background-color: #00aacc;
}

/*
 * If a row has 10 or more keys in it, then the popup for the first and last
 * keys can't be centered over the key and have to be offset a bit.
 */
.key:not(.specialkey):first-child:nth-last-child(10).touched::before,
.key:not(.specialkey):first-child:nth-last-child(11).touched::before,
.key:not(.specialkey):first-child:nth-last-child(12).touched::before {
  left: 0;
}
.key:not(.specialkey):last-child:nth-child(10).touched::before,
.key:not(.specialkey):last-child:nth-child(11).touched::before,
.key:not(.specialkey):last-child:nth-child(12).touched::before {
  left: auto;
  right: 0;
}

.altmenu {
  position:absolute;
  height: 6rem;
  font-size: 0;
  border-radius: 3rem;
  background-color: #00aacc;
  overflow: hidden;
  white-space: nowrap;
  z-index: 30;
}

.altkey {
  display: inline-block;
  height: 6rem;
  min-width: 3rem;

  background-color: #00aacc;
  color: #fff;
  font-family: sans-serif;
  font-weight: 500;
  font-size: 2.8rem;
  line-height: 6rem;
  text-align: center;

  margin: 0;
  border-right: 1px solid #0099b8;
}

/*
 * Because we use rounded borders we make the first and last alternatives
 * 1.2rem wider than those in the middle. If we change this width, we also
 * have to change the 12px constant in pageview.js
 */
.altkey:first-child, .altkey:last-child {
  min-width: 4.2rem;
}

/*
 * If there is only one alternative, then we make the key as wide as it
 * is high so it appears as a circle.
 */
.altkey:first-child:last-child {
  min-width: 6rem;
}

.altkey.touched {
  background-color: #0099b8;
}

.suggestions {
  display: block;
  position: absolute;
  height: 3rem;
  width: 100%;
  top: 0;
  left: 0;
  background: #000;
  padding: 0 0.3rem;
  border: none;
  overflow: hidden;
  white-space: nowrap;
}

.suggestion {
  display: inline-block;
  height: 100%;       /* width set in render.js */
  margin: 0 1%;       /* don't change without updating with in render.js */
  border: 0;
  overflow: hidden;
  -moz-box-sizing: border-box;

  font-size: 2.3rem;
  line-height: 3rem;
  height: 3rem;
  color: #fff;
  text-align: center;
}

.suggestion.autocorrect {
  color: #0ac;
}

/*
 * Styles for the dismiss suggestions button in the candidate panel
 */

.suggestions > .dismiss-suggestions-button {
  display:inline-block;
  height: 100%;
  /*
   * the icon is 2.4rem wide but the visual space only takes up 1.4rem
   * we want 10 blank pixels to the left and 15 to the right. But the first
   * suggestion has a 0.3rem margin, so we only need to add 1.2rem to the
   * icon size.
   */
  width: 3.6rem;
  background: url('images/icon_dismiss.png') 0.5rem center /2.4rem no-repeat;
  margin: 0;
  padding: 0;
}

/*
 * We define rems differently in landscape than we do in portrait so that
 * the keyboard isn't too high in landscape mode. But if we do only that
 * then the fonts end up too small, so we adjust font sizes and related
 * properties here so that the fonts in landscape are a little bigger
 * But still not as big as in portrait mode.
 * On a 320x480 phone, rems shrink by 3/4ths, but we increase the font size
 * by roughly 7/6ths, so we end up with fonts that are 21/24th in landscape.
 */
@media (orientation:landscape) {
  html {
    /*
     * In landscape mode, we define 1 rem to equal 1/64th of the screen width.
     * It is not clear if this is a careful design choice or just a convenient
     * heuristic that works out okay for the form factors we use.
     */
    font-size: 1.5625vw;
  }

  #keyboardContainer {
    height: 24.1rem; /* 20.4rem keyboard, 3.5rem suggestions 0.2 rem border*/
  }

  .key {
    font-size: 2.8rem;
  }

  .key.specialkey:not([data-name=SPACE]) {
    font-size: 2.1rem;
  }

  .key:not(.specialkey).touched::before {
    top: -7rem;
    left: calc(50% - 3.5rem);
    width: 7rem;
    height: 7rem;
    font-size: 3.5rem;
    line-height: 7rem;
  }

  .altmenu {
    height: 7rem;
    border-radius: 3.5rem;
  }

  .altkey {
    height: 7rem;
    min-width: 3.5rem;
    font-size: 3.5rem;
    line-height: 7rem;
  }

  .altkey:first-child, .altkey:last-child {
      min-width: 4.9rem;
  }

  .altkey:first-child:last-child {
      min-width: 7rem;
  }

  .suggestions {
    height: 3.5rem;
  }

  .suggestion {
    font-size: 2.7rem;
    line-height: 3.5rem;
    height: 3.5rem;
  }
}
