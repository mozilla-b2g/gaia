#! /bin/bash -ex

USAGE="git ci-checkout-pr <directory> <source_repository> <source_ref> <source_rev> <target_repo> <target_ref> <target_rev>"

. "$(which git-ci-checkout-setup)"

# Checkout the git repository at the correct version with the pull request
# applied.
# Arguments:
#  - directory
#  - source repository [ex: http://github.com/mozilla-b2g/gaia]
#  - source ref [ex: master]
#  - source rev [ex: sha]
#  - target repository [ex: http://github.com/lightsofapollo/gaia]
#  - target ref [ex: pr]
#  - target rev [ex: sha]
checkout_pr() {
  local checkout_path=$1

  local source_repo=$2
  local source_ref=$3
  local source_rev=$4

  local target_repo=$5
  local target_ref=$6
  local target_rev=$7

  # git-ci-checkout-pr contains the initial logic which checkouts the source
  # state... NOTE: The dash style is used here so tests and remote work equally
  # well...
  git ci-checkout-ref $checkout_path $source_repo $source_ref $source_rev
  change_git_target $checkout_path

  local branch="git-ci-$source_rev-to-$target_rev"

  # Clear up any previous branches with the same name
  if [ "$(contains $branch $(git branch))" = "0" ];
  then
    git branch -D $branch
  fi

  # Checkout the new branch.
  git checkout -b $branch

  # We might also consider checking out the revision without the merge if this
  # fails which is what travis CI does but this may lead to false positives.
  git fetch $target_repo $target_ref
  git merge --no-edit $target_rev
}

checkout_pr $@
