{
  "name": "hashish",
  "version": "0.0.4",
  "description": "Hash data structure manipulation functions",
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-hashish.git"
  },
  "keywords": [
    "hash",
    "object",
    "convenience",
    "manipulation",
    "data structure"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "dependencies": {
    "traverse": ">=0.2.4"
  },
  "devDependencies": {
    "expresso": ">=0.6.0"
  },
  "scripts": {
    "test": "expresso"
  },
  "license": "MIT/X11",
  "engine": [
    "node >=0.2.0"
  ],
  "readme": "Hashish\n=======\n\nHashish is a node.js library for manipulating hash data structures.\nIt is distilled from the finest that ruby, perl, and haskell have to offer by\nway of hash/map interfaces.\n\nHashish provides a chaining interface, where you can do:\n\n    var Hash = require('hashish');\n    \n    Hash({ a : 1, b : 2, c : 3, d : 4 })\n        .map(function (x) { return x * 10 })\n        .filter(function (x) { return x < 30 })\n        .forEach(function (x, key) {\n            console.log(key + ' => ' + x);\n        })\n    ;\n    \nOutput:\n\n    a => 10\n    b => 20\n\nSome functions and attributes in the chaining interface are terminal, like\n`.items` or `.detect()`. They return values of their own instead of the chain\ncontext.\n\nEach function in the chainable interface is also attached to `Hash` in chainless\nform:\n\n    var Hash = require('hashish');\n    var obj = { a : 1, b : 2, c : 3, d : 4 };\n    \n    var mapped = Hash.map(obj, function (x) {\n        return x * 10\n    });\n    \n    console.dir(mapped);\n\nOutput:\n\n    { a: 10, b: 20, c: 30, d: 40 }\n\nIn either case, the 'this' context of the function calls is the same object that\nthe chained functions return, so you can make nested chains.\n\nMethods\n=======\n\nforEach(cb)\n-----------\n\nFor each key/value in the hash, calls `cb(value, key)`.\n\nmap(cb)\n-------\n\nFor each key/value in the hash, calls `cb(value, key)`.\nThe return value of `cb` is the new value at `key` in the resulting hash.\n\nfilter(cb)\n----------\n\nFor each key/value in the hash, calls `cb(value, key)`.\nThe resulting hash omits key/value pairs where `cb` returned a falsy value.\n\ndetect(cb)\n----------\n\nReturns the first value in the hash for which `cb(value, key)` is non-falsy.\nOrder of hashes is not well-defined so watch out for that.\n\nreduce(cb)\n----------\n\nReturns the accumulated value of a left-fold over the key/value pairs.\n\nsome(cb)\n--------\n\nReturns a boolean: whether or not `cb(value, key)` ever returned a non-falsy\nvalue.\n\nupdate(obj1, [obj2, obj3, ...])\n-----------\n\nMutate the context hash, merging the key/value pairs from the passed objects\nand overwriting keys from the context hash if the current `obj` has keys of\nthe same name. Falsy arguments are silently ignored.\n\nupdateAll([ obj1, obj2, ... ])\n------------------------------\n\nLike multi-argument `update()` but operate on an array directly.\n\nmerge(obj1, [obj2, obj3, ...])\n----------\n\nMerge the key/value pairs from the passed objects into the resultant hash\nwithout modifying the context hash. Falsy arguments are silently ignored.\n\nmergeAll([ obj1, obj2, ... ])\n------------------------------\n\nLike multi-argument `merge()` but operate on an array directly.\n\nhas(key)\n--------\n\nReturn whether the hash has a key, `key`.\n\nvaluesAt(keys)\n--------------\n\nReturn an Array with the values at the keys from `keys`.\n\ntap(cb)\n-------\n\nCall `cb` with the present raw hash.\nThis function is chainable.\n\nextract(keys)\n-------------\n\nFilter by including only those keys in `keys` in the resulting hash.\n\nexclude(keys)\n-------------\n\nFilter by excluding those keys in `keys` in the resulting hash.\n\nAttributes\n==========\n\nThese are attributes in the chaining interface and functions in the `Hash.xxx`\ninterface.\n\nkeys\n----\n\nReturn all the enumerable attribute keys in the hash.\n\nvalues\n------\n\nReturn all the enumerable attribute values in the hash.\n\ncompact\n-------\n\nFilter out values which are `=== undefined`.\n\nclone\n-----\n\nMake a deep copy of the hash.\n\ncopy\n----\n\nMake a shallow copy of the hash.\n\nlength\n------\n\nReturn the number of key/value pairs in the hash.\nNote: use `Hash.size()` for non-chain mode.\n\nsize\n----\n\nAlias for `length` since `Hash.length` is masked by `Function.prototype`.\n\nSee Also\n========\n\nSee also [creationix's pattern/hash](http://github.com/creationix/pattern),\nwhich does a similar thing except with hash inputs and array outputs.\n\nInstallation\n============\n\nTo install with [npm](http://github.com/isaacs/npm):\n \n    npm install hashish\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso):\n\n    expresso\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/node-hashish/issues"
  },
  "homepage": "https://github.com/substack/node-hashish",
  "_id": "hashish@0.0.4",
  "_shasum": "6d60bc6ffaf711b6afd60e426d077988014e6554",
  "_from": "hashish@>=0.0.2 <0.1",
  "_resolved": "https://registry.npmjs.org/hashish/-/hashish-0.0.4.tgz"
}
