{
  "name": "fe.js",
  "version": "0.1.4",
  "author": {
    "name": "Greg Weng",
    "email": "gweng@mozilla.com"
  },
  "description": "create dummy files and directories in a easy way",
  "main": "./exports.js",
  "contributors": [
    {
      "name": "Greg Weng",
      "email": "gweng@mozilla.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/snowmantw/Fe.git"
  },
  "keywords": [
    "mock",
    "testing",
    "fs",
    "filesystem"
  ],
  "dependencies": {},
  "analyze": false,
  "license": "GPLv3",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "# Fe - mock filesystem in the easist way\n\nCreate mock files and directories in the easist way:\n\n```javascript\nvar fe = require('fe.js'),\n    fs = fe.fs;\n\n// Create a 'directory'.\nvar bar = fe.instance().directory('/foo/bar');\n\n// Create a 'file'.\nvar charlie = fe.instance().file(bar, 'charlie.json', {'delta': 3.14},\n  function(oldContent, content, mode) {\n\n    // This function can return handled content before it got read.\n    // You can even convert it as binary data to fit your reader function.\n    if ('r' === mode)\n      return oldContent.delta;\n  });\n\n// Read the file through the path. Would print '3.14'.\nconsole.log( fs.readFileSync('/foo/bar/charlie.json') );\n```\n\nThe mocked `fs` module can be used with `proxyquire`, which can\nsubstitute the original `fs` module in the test context:\n\n```javascript\n// You can find this in '/test/features/supports/world.js'\n// Proxyquire: https://github.com/thlorenz/proxyquire\nvar proxyquire = require('proxyquire')\n  , assert     = require('assert')\n  , fe         = require( __dirname + '/../../../exports.js')\n  , fsStub     = fe.fs\n  , wrench = proxyquire('wrench', { 'fs': fsStub });\n\n// Now the `fs` module in the `wrench` would be replaced with our\n// mocked one. It would access only the Fe's \"filesystem\".\n```\n\n## Motivation\n\nSometime we just want to test some simple file handling functions,\nand don't want to create real files and directories because:\n\n* It's annoying to remember to remove test files and directories\nafter tests\n\n* It's annoying to fill the content of dummy files with file APIs\n\n* Forgot to delete files after test may cause some troubles\n\n* Tests should completely live within sandbox. Create files and\ndirectories may cause side-effects on your system\n\n* If your dummy files and directories got affected by other\nprocesses on your system, you may have no chance to know\nwhat's going wrong with your tests\n\nSo I create this to implement a filesystem in process memory,\nand a mocked `fs` module which has some compatible APIs.\n\n## Unsupported APIs\n\nRight now, some APIs in the `fs` can't be supported due to the complexities.\nSome of them are:\n\n* write/read: have no idea about how to support buffer\n* truncate/ftruncate: have no idea about how to handle length\n* link/symlink: the way I used is hard to create and maintain links\n\nOthers are maybe supportable. But I'm lack of time to implement them so far.\nSo if you want to support more APIs, feedbacks and even patches are welcome.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/snowmantw/Fe/issues"
  },
  "homepage": "https://github.com/snowmantw/Fe",
  "_id": "fe.js@0.1.4",
  "dist": {
    "shasum": "f97ea4f94bc82dd348b8029fa95ed1b4d898dc92",
    "tarball": "http://registry.npmjs.org/fe.js/-/fe.js-0.1.4.tgz"
  },
  "_from": "fe.js@~0.1.4",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "gweng",
    "email": "gweng@mozilla.com"
  },
  "maintainers": [
    {
      "name": "gweng",
      "email": "gweng@mozilla.com"
    }
  ],
  "directories": {},
  "_shasum": "f97ea4f94bc82dd348b8029fa95ed1b4d898dc92",
  "_resolved": "https://registry.npmjs.org/fe.js/-/fe.js-0.1.4.tgz"
}
