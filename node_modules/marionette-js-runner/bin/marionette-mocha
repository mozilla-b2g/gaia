#! /usr/bin/env node
var Mocha = require('mocha'),
    Parent = require('../lib/parentrunner').ParentRunner,
    fs = require('fs'),
    fsPath = require('path'),
    argv = process.argv.slice(2),
    program = require('commander');


/**
 * Path to marionette-mocha configuration file.
 * @type {string}
 */
var OPTS_FILE = 'marionette-mocha.opts';


/**
 * @return {Object} Configuration for Host, ProfileBuilder, Reporter,
 *     and profileBase.
 */
function getOpts() {
  var Reporter;
  try {
    Reporter = require(program.reporter);
  } catch (e) {
    Reporter = require('mocha/lib/reporters/' + (program.reporter || 'dot'));
  }

  program.host = program.host || 'marionette-b2gdesktop-host';
  program.profileBuilder =
    program.profileBuilder || 'marionette-profile-builder';

  var Host = require(program.host),
      ProfileBuilder = require(program.profileBuilder);

  // Parse base profile options.
  var profileBase;
  if (program.profileBase) {
    // Remember because require is used json files or JS files can be used.
    // The path is resolved since it should be relative to cwd rather than this
    // executable.
    profileBase = require(fsPath.resolve(program.profileBase));
  }

  // Whether or not to proxy console.* calls from gecko.
  var verbose = program.verbose;

  return {
    Host: Host,
    ProfileBuilder: ProfileBuilder,
    Reporter: Reporter,
    profileBase: profileBase,
    verbose: verbose
  };
}


/**
 * Look for marionette-mocha opts file and add any configuration we find
 *     to the program argv.
 * @param {string} path relative path to directory to look in.
 */
function maybeAppendOptsFileArgs(path) {
  var optsFile = fsPath.join(path, OPTS_FILE);
  if (!fs.existsSync(optsFile)) {
    return;
  }

  process.argv.splice.apply(
    process.argv,
    [2, 0].concat(require('../lib/optsfileparser')(optsFile))
  );
}


/**
 * Apply the json whitelist/blacklist manifest if manifest is turned on.
 */
function maybeApplyManifest() {
  if (program.manifest) {
    var applyManifest = require('../lib/applymanifest');
    try {
      argv = applyManifest(program.manifest, program.args, argv);
    } catch (err) {
      console.error(err);
      process.exit(1);
    }
  }
}


function main() {
  ['test/', 'tests', ''].forEach(maybeAppendOptsFileArgs);

  program
    .option('-H, --host [host]',
            'host module to use defaults to marionette-b2gdesktop-host')
    .option('-M, --manifest [manifest]',
            'relative path to a JSON-formatted manifest file defining ' +
            'test runner whitelist or blacklist')
    .option('-R, --reporter [reporter]', 'mocha reporter to use')
    .option('-v, --verbose',
            'pipe console.* logs from child gecko processes to test process')
    .option('--profile-base [json or js file]',
            'default profile options to use in all tests.')
    .option('--profile-builder [builder]', 'profile generation module')

    // The following arguments have been copied directly from from mocha.js. This
    // enables marionette-mocha to:
    // 1. correctly report mocha.js's command-line options
    // 2. Differentiate which arguments reflect file names (so they may be
    // controlled via the `--manifest` option)
    // https://github.com/visionmedia/mocha/blob/35fe57573e222a44dfc17682f9bf159122405efa/bin/_mocha#L63-L86
    .version(JSON.parse(fs.readFileSync(
      __dirname + '/../package.json', 'utf8')).version)
    .usage('[debug] [options] [files]')
    .option('-r, --require <name>', 'require the given module')
    .option('-R, --reporter <name>', 'specify the reporter to use', 'dot')
    .option('-u, --ui <name>', 'specify user-interface (bdd|tdd|exports)', 'bdd')
    .option('-g, --grep <pattern>', 'only run tests matching <pattern>')
    .option('-i, --invert', 'inverts --grep matches')
    .option('-t, --timeout <ms>', 'set test-case timeout in milliseconds [2000]')
    .option('-s, --slow <ms>', '"slow" test threshold in milliseconds [75]')
    .option('-w, --watch', 'watch files for changes')
    .option('-c, --colors', 'force enabling of colors')
    .option('-C, --no-colors', 'force disabling of colors')
    .option('-G, --growl', 'enable growl notification support')
    .option('-d, --debug', "enable node's debugger, synonym for node --debug")
    .option('-b, --bail', "bail after first test failure")
    .option('-A, --async-only', "force all tests to take a callback (async)")
    .option('--recursive', 'include sub directories')
    .option('--debug-brk', "enable node's debugger breaking on the first line")
    .option('--globals <names>',
      'allow the given comma-delimited global [names]')
    .option('--check-leaks', 'check for global variable leaks')
    .option('--interfaces', 'display available interfaces')
    .option('--reporters', 'display available reporters')
    .option('--compilers <ext>:<module>,...',
      'use the given module(s) to compile files')
    .parse(process.argv);

  maybeApplyManifest();

  var runner = new Parent(argv);
  runner.run(getOpts());
  runner.process.stdout.pipe(process.stdout);
  runner.process.stderr.pipe(process.stderr);
  runner.process.on('exit', process.exit);
}
if (require.main === module) {
  main();
}
