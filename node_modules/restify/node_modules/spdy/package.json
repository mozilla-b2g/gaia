{
  "name": "spdy",
  "version": "1.19.3",
  "description": "Implementation of the SPDY protocol on node.js.",
  "license": "MIT",
  "keywords": [
    "spdy"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/indutny/node-spdy.git"
  },
  "homepage": "https://github.com/indutny/node-spdy",
  "bugs": {
    "url": "https://github.com/indunty/node-spdy/issues",
    "email": "node-spdy+bugs@indutny.com"
  },
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor.indutny@gmail.com"
  },
  "contributors": [
    {
      "name": "Chris Storm",
      "email": "github@eeecooks.com"
    },
    {
      "name": "François de Metz",
      "email": "francois@2metz.fr"
    },
    {
      "name": "Ilya Grigorik",
      "email": "ilya@igvita.com"
    },
    {
      "name": "Roberto Peon"
    },
    {
      "name": "Tatsuhiro Tsujikawa"
    },
    {
      "name": "Jesse Cravens",
      "email": "jesse.cravens@gmail.com"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.3.x"
  },
  "scripts": {
    "test": "mocha --ui tdd --growl --reporter spec test/unit/*-test.js"
  },
  "engines": [
    "node >= 0.7.0"
  ],
  "main": "./lib/spdy",
  "optionalDependencies": {},
  "readme": "# SPDY Server for node.js [![Build Status](https://secure.travis-ci.org/indutny/node-spdy.png)](http://travis-ci.org/indutny/node-spdy)\n\n<a href=\"http://flattr.com/thing/758213/indutnynode-spdy-on-GitHub\" target=\"_blank\">\n<img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" title=\"Flattr this\" border=\"0\" /></a>\n\nWith this module you can create [SPDY](http://www.chromium.org/spdy) servers\nin node.js with natural http module interface and fallback to regular https\n(for browsers that don't support SPDY yet).\n\n## Usage\n\nServer:\n```javascript\nvar spdy = require('spdy'),\n    fs = require('fs');\n\nvar options = {\n  key: fs.readFileSync(__dirname + '/keys/spdy-key.pem'),\n  cert: fs.readFileSync(__dirname + '/keys/spdy-cert.pem'),\n  ca: fs.readFileSync(__dirname + '/keys/spdy-ca.pem'),\n\n  // **optional** SPDY-specific options\n  windowSize: 1024 * 1024, // Server's window size\n\n  // **optional** if true - server will send 3.1 frames on 3.0 *plain* spdy\n  autoSpdy31: false\n};\n\nvar server = spdy.createServer(options, function(req, res) {\n  res.writeHead(200);\n  res.end('hello world!');\n});\n\nserver.listen(443);\n```\n\nClient:\n```javascript\nvar spdy = require('spdy');\nvar http = require('http');\n\nvar agent = spdy.createAgent({\n  host: 'www.google.com',\n  port: 443,\n\n  // Optional SPDY options\n  spdy: {\n    plain: false or true,\n    ssl: false or true,\n    version: 3 // Force SPDY version\n  }\n});\n\nhttp.get({\n  host: 'www.google.com',\n  agent: agent\n}, function(response) {\n  console.log('yikes');\n  // Here it goes like with any other node.js HTTP request\n  // ...\n  // And once we're done - we may close TCP connection to server\n  // NOTE: All non-closed requests will die!\n  agent.close();\n}).end();\n```\n\nAnd by popular demand - usage with\n[express](https://github.com/visionmedia/express):\n\n```javascript\nvar spdy = require('spdy'),\n    express = require('express'),\n    fs = require('fs');\n\nvar options = { /* the same as above */ };\n\nvar app = express();\n\napp.use(/* your favorite middleware */);\n\nvar server = spdy.createServer(options, app);\n\nserver.listen(443);\n```\n\n## API\n\nAPI is compatible with `http` and `https` module, but you can use another\nfunction as base class for SPDYServer.\n\n```javascript\nspdy.createServer(\n  [base class constructor, i.e. https.Server],\n  { /* keys and options */ }, // <- the only one required argument\n  [request listener]\n).listen([port], [host], [callback]);\n```\n\nRequest listener will receive two arguments: `request` and `response`. They're\nboth instances of `http`'s `IncomingMessage` and `OutgoingMessage`. But three\ncustom properties are added to both of them: `streamID`, `isSpdy`,\n`spdyVersion`. The first one indicates on which spdy stream are sitting request\nand response. Second is always true and can be checked to ensure that incoming\nrequest wasn't received by HTTPS fallback and last one is a number representing\nused SPDY protocol version (2 or 3 for now).\n\n### Push streams\n\nIt is possible to initiate 'push' streams to send content to clients _before_\nthe client requests it.\n\n```javascript\nspdy.createServer(options, function(req, res) {\n  var headers = { 'content-type': 'application/javascript' };\n  var stream = res.push('/main.js', headers);\n  stream.on('acknowledge', function() {\n  });\n  stream.on('error', function() {\n  });\n  stream.end('alert(\"hello from push stream!\");');\n\n  res.end('<script src=\"/main.js\"></script>');\n}).listen(443);\n```\n\nPush is accomplished via the `push()` method invoked on the current response\nobject (this works for express.js response objects as well).  The format of the\n`push()` method is:\n\n`.push('full or relative url', { ... headers ... }, optional priority, callback)`\n\nYou can use either full ( `http://host/path` ) or relative ( `/path` ) urls with\n`.push()`. `headers` are the same as for regular response object. `callback`\nwill receive two arguments: `err` (if any error is happened) and `stream`\n(stream object have API compatible with a\n[net.Socket](http://nodejs.org/docs/latest/api/net.html#net.Socket) ).\n\nClient usage:\n```javascript\nvar agent = spdy.createAgent({ /* ... */ });\nagent.on('push', function(stream) {\n  stream.on('error', function(err) {\n    // Handle error\n  });\n  // Read data from stream\n  // ...\n  // stream.associated points to associated client-initiated stream\n});\n```\n\nNOTE: You're responsible for the `stream` object once given it in `.push()`\ncallback. Hence ignoring `error` events on it might result in uncaught\nexceptions and crash your program.\n\n### Trailing headers\n\nServer usage:\n```javascript\nfunction (req, res) {\n  // Send trailing headers to client\n  res.addTrailers({ header1: 'value1', header2: 'value2' });\n\n  // On client's trailing headers\n  req.on('trailers', function(headers) {\n    // ...\n  });\n}\n```\n\nClient usage:\n```javascript\nvar req = http.request({ agent: spdyAgent, /* ... */ }).function (res) {\n  // On server's trailing headers\n  res.on('trailers', function(headers) {\n    // ...\n  });\n});\nreq.write('stuff');\nreq.addTrailers({ /* ... */ });\nreq.end();\n```\n\n### Options\n\nAll options supported by\n[tls](http://nodejs.org/docs/latest/api/tls.html#tls.createServer) are working\nwith node-spdy. In addition, `maxStreams` options is available. it allows you\ncontrolling [maximum concurrent streams](http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2#TOC-SETTINGS)\nprotocol option (if client will start more streams than that limit, RST_STREAM\nwill be sent for each additional stream).\n\nAdditional options:\n\n* `plain` - if defined, server will ignore NPN and ALPN data and choose whether\n  to use spdy or plain http by looking at first data packet.\n* `ssl` - if `false` and `options.plain` is `true`, `http.Server` will be used\n  as a `base` class for created server.\n* `maxChunk` - if set and non-falsy, limits number of bytes sent in one DATA\n  chunk. Setting it to non-zero value is recommended if you care about\n  interleaving of outgoing data from multiple different streams.\n  (defaults to 8192)\n\n#### Contributors\n\n* [Fedor Indutny](https://github.com/indutny)\n* [Chris Strom](https://github.com/eee-c)\n* [François de Metz](https://github.com/francois2metz)\n* [Ilya Grigorik](https://github.com/igrigorik)\n* [Roberto Peon](https://github.com/grmocg)\n* [Tatsuhiro Tsujikawa](https://github.com/tatsuhiro-t)\n* [Jesse Cravens](https://github.com/jessecravens)\n\n#### LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2014.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "spdy@1.19.3",
  "_shasum": "db929da82c9b2649439502dcb18cfd3e5ddef846",
  "_from": "spdy@1.19.3",
  "_resolved": "https://registry.npmjs.org/spdy/-/spdy-1.19.3.tgz"
}
