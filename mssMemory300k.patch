diff --git a/apps/sms/js/compose.js b/apps/sms/js/compose.js
index 94e805b..35f8548 100755
--- a/apps/sms/js/compose.js
+++ b/apps/sms/js/compose.js
@@ -180,7 +180,7 @@ var Compose = (function() {
     } else {
       // trigger a recompute of size on the keypresses
       state.size = null;
-      compose.lock = false;
+      compose.unlocking();
     }
   }
 
@@ -483,6 +483,18 @@ var Compose = (function() {
      */
     lock: false,
 
+    //disable the attach button when the memory exceeds
+    locking: function(){
+      compose.lock = true;
+      dom.attachButton.disabled = 'true';
+    } 
+
+    //enable the attach button again when the memory is decreased
+    unlocking: function(){
+      compose.lock = false;
+      dom.attachButton.disabled = 'false';
+    }
+
     disable: function(state) {
       dom.sendButton.disabled = state;
       return this;
diff --git a/apps/sms/js/thread_ui.js b/apps/sms/js/thread_ui.js
index c1faca1..378c9df 100755
--- a/apps/sms/js/thread_ui.js
+++ b/apps/sms/js/thread_ui.js
@@ -451,7 +451,7 @@ var ThreadUI = {
   },
 
   showMaxLengthNotice: function thui_showMaxLengthNotice(l10nKey) {
-    Compose.lock = true;
+    Compose.locking();
     this.maxLengthNotice.querySelector('p').setAttribute(
       'data-l10n-id',
       l10nKey
@@ -460,7 +460,7 @@ var ThreadUI = {
   },
 
   hideMaxLengthNotice: function thui_hideMaxLengthNotice() {
-    Compose.lock = false;
+    Compose.unlocking();
     this.maxLengthNotice.classList.add('hide');
   },
 
diff --git a/apps/sms/test/unit/thread_ui_test.js b/apps/sms/test/unit/thread_ui_test.js
index 56a7fa3..0f0b8c6 100755
--- a/apps/sms/test/unit/thread_ui_test.js
+++ b/apps/sms/test/unit/thread_ui_test.js
@@ -498,7 +498,7 @@ suite('thread_ui.js >', function() {
       banner.classList.remove('hide');
 
       // add a lock to check that it is correctly removed
-      Compose.lock = true;
+      Compose.locking();
 
       Compose.on.withArgs('input').yield();
     }
